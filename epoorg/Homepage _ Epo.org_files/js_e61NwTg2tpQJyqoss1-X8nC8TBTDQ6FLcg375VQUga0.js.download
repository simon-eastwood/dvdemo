/**
 * @file
 * CKEditor Accordion functionality.
 */

(function ($, Drupal, drupalSettings) {
  'use strict';
  Drupal.behaviors.ckeditorAccordion = {
    attach: function (context, settings) {

      // Create accordion functionality if the required elements exist is available.
      var $ckeditorAccordion = $('.ckeditor-accordion');
      if ($ckeditorAccordion.length > 0) {
        // Create simple accordion mechanism for each tab.
        $ckeditorAccordion.each(function () {
          var $accordion = $(this);
          if ($accordion.hasClass('styled')) {
            return;
          }

          // The first one is the correct one.
          if (!drupalSettings.ckeditorAccordion.accordionStyle.collapseAll) {
            $accordion.children('dt:first').addClass('active');
            $accordion.children('dd:first').addClass('active');
            $accordion.children('dd:first').css('display', 'block');
          }

          // Turn the accordion tabs to links so that the content is accessible & can be traversed using keyboard.
          $accordion.children('dt').each(function () {
            var $tab = $(this);
            var tabText = $tab.text().trim();
            var toggleClass = $tab.hasClass('active') ? ' active' : '';
            $tab.html('<a class="ckeditor-accordion-toggler" href="#"><span class="ckeditor-accordion-toggle' + toggleClass + '"></span>' + tabText + '</a>');
          });

          // Wrap the accordion in a div element so that quick edit function shows the source correctly.
          $accordion.addClass('styled').removeClass('ckeditor-accordion').wrap('<div class="ckeditor-accordion-container"></div>');

          // Trigger an ckeditorAccordionAttached event to let other frameworks know that the accordion has been attached.
          $accordion.trigger('ckeditorAccordionAttached');
        });

        // Add click event to body once because quick edits & ajax calls might reset the HTML.
        $('body').once('ckeditorAccordionToggleEvent').on('click', '.ckeditor-accordion-toggler', function (e) {
          var $t = $(this).parent();
          var $parent = $t.parent();

          // Clicking on open element, close it.
          if ($t.hasClass('active')) {
            $t.removeClass('active');
            $t.next().slideUp();
          }
          else {
            if(!drupalSettings.ckeditorAccordion.accordionStyle.keepRowsOpen) {
              // Remove active classes.
              $parent.children('dt.active').removeClass('active').children('a').removeClass('active');
              $parent.children('dd.active').slideUp(function () {
                $(this).removeClass('active');
              });
            }

            // Show the selected tab.
            $t.addClass('active');
            $t.next().slideDown(300).addClass('active');
          }

          // Don't add hash to url.
          e.preventDefault();
        });
      }
    }
  };
})(jQuery, Drupal, drupalSettings);
;
/**
 * @file
 * Defines Javascript behaviors for MegaMenu frontend.
 */

(function ($, Drupal, drupalSettings) {
  "use strict";

  Drupal.TBMegaMenu = Drupal.TBMegaMenu || {};

  Drupal.TBMegaMenu.oldWindowWidth = 0;
  Drupal.TBMegaMenu.displayedMenuMobile = false;
  Drupal.TBMegaMenu.supportedScreens = [980];
  Drupal.TBMegaMenu.focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), details:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"])';
  Drupal.TBMegaMenu.menuResponsive = function () {
    var windowWidth = window.innerWidth ? window.innerWidth : $(window).width();
    var navCollapse = $('.tb-megamenu').children('.nav-collapse');
    if (windowWidth < Drupal.TBMegaMenu.supportedScreens[0]) {
      navCollapse.addClass('collapse');
      if (Drupal.TBMegaMenu.displayedMenuMobile) {
        navCollapse.css({ height: 'auto', overflow: 'visible' });
      }
      else {
        navCollapse.css({ height: 0, overflow: 'hidden' });
      }
    }
    else {
      // If width of window is greater than 980 (supported screen).
      navCollapse.removeClass('collapse');
      if (navCollapse.height() <= 0) {
        navCollapse.css({ height: 'auto', overflow: 'visible' });
      }
    }
  };

  Drupal.TBMegaMenu.focusNextPrevElement = function (direction) {
    // Add all the elements we want to include in our selection
    var $current = $(document.activeElement);

    if ($current.length) {
      var $focusable = $(Drupal.TBMegaMenu.focusableElements).filter(function () {
        var $this = $(this);
        return $this.closest('.tb-megamenu-subnav').length === 0 && $this.is(':visible');
      })

      var index = $focusable.index($current);
      if (index > -1) {
        if (direction === 'next') {
          var nextElement = $focusable[index + 1] || $focusable[0];
        }
        else {
          var nextElement = $focusable[index - 1] || $focusable[0];
        }

        nextElement.focus();
      }
    }
  }

  // Add the same height for the menu and submenu
  Drupal.behaviors.tbMegaMenuSameHeight = {
    attach: function (context, settings) {
      
      $('.level-2.dropdown-submenu').once('tbMegaMenuSameHeight').on('click', function () {
        
        // Give the same height to the menu and submenu
        let testHeightMenu = $(this).closest('.tb-megamenu-submenu').find('.mega-dropdown-inner').first().outerHeight();
        let testHeightSubmenu = $(this).find('.mega-dropdown-inner');  
        $(testHeightSubmenu).css('height', parseInt(testHeightMenu));
        
        
        // When the height of the submenu increases, the height of the first menu follows
        let $menuOpen = $(this).closest('.tb-megamenu-submenu');
        let menuHeight = $(this).closest('.tb-megamenu-submenu').children().first().outerHeight();
        let submenuHeight = $(this).find('.mega-dropdown-inner').first().children().first().height();
        
        if (parseInt(submenuHeight) + parseInt(100) > menuHeight) {
          $menuOpen.css('height', parseInt(submenuHeight) + parseInt(100));
        }
      })
    }
  }

  Drupal.behaviors.rightSideMenuAccessibility = {
    attach: function (context, settings) {
      $('.region-header .block-fixed-block-contentsearch-button .minimal-button').add('.region-header .lang-dropdown-select a.is-active').keydown(function (e) {
        switch (e.keyCode) { 
          // SPACE
          case 32:
            e.preventDefault();
            e.stopPropagation();
            e.target.click();
        }
      });
    }
  }

  Drupal.behaviors.tbMegaMenuAction = {
    attach: function (context, settings) {
      $('.tb-megamenu-nav .level-1 >.tb-megamenu-submenu >.mega-dropdown-inner > .tb-megamenu-row').once().prepend('<div class="close-wrapper mega-col-nav"><button class="close-megamenu" type="button" tabindex="0"></button></div>');
      $('.tb-megamenu', context).once('tb-megamenu').each(function () {

        /* Keyboard Control Setup */
        // Semi-Global Variables
        var navParent = document.querySelector('.tb-megamenu'),
          linkArray = new Array(),
          curPos = new Array(-1, -1, -1);

        // Each Top-Level Link
        $(this).find('.level-1').children('a, span').not('.mobile-only').each(function (i, toplink) {
          linkArray[i] = new Array();

          // Add Link to Array
          linkArray[i][-1] = toplink;

          // Determine Coordinates
          $(toplink).data({ coordinate: [i, -1] });

          // Each Column
          $(toplink).next().children().children().children('.mega-col-nav').each(function (j, column) {
            // Only add to the linkArray if menu items exist.
            // TODO - this does not allow for tabbing to links in blocks, only menu item links.
            if ($(column).find(Drupal.TBMegaMenu.focusableElements).length > 0) {
              linkArray[i][j] = new Array();

              // Each Link
              $(column).find(Drupal.TBMegaMenu.focusableElements).each(function (k, sublink) {

                // Add Link to Array
                linkArray[i][j][k] = sublink;

                // Determine Coordinates
                $(sublink).data({ coordinate: [i, j, k] });
              }); // each link
            }

          }); // each column

        }); // each top-level link

        // Update Position on Focus
        $(this).find(Drupal.TBMegaMenu.focusableElements).focus(function () {
          curPos = $(this).data('coordinate');
        });

        // Key Pressed
        function keydownEvent(k) {
          // Determine Key
          switch (k.keyCode) {

            // TAB
            case 9:
              k.preventDefault();
              nav_tab(k);
              break;

            // RETURN (ENTER OR SPACE)
            case 13 : case 32:
              k.preventDefault();
              k.target.click();
              if ($('.tb-megamenu .level-1 > span').is(':focus')) {
                nav_down();
              }
              break;

            // ESC
            case 27:
              nav_esc();
              break;

            // LEFT
            case 37:
              k.preventDefault();
              nav_left();
              break;

            // UP
            case 38:
              k.preventDefault();
              nav_up();
              break;

            // RIGHT
            case 39:
              k.preventDefault();
              nav_right();
              break;

            // DOWN
            case 40:
              k.preventDefault();
              nav_down();
              break;

            // HOME
            case 36:
              nav_home();
              break;

            // END
            case 35:
              nav_end();
              break;

            // Else
            default:
            // Do nothing

          } // determine key
        } // keydownEvent

        /* Keypress Functions */
        // Tab
        function nav_tab(k) {
          if (nav_is_toplink()) {
            if (k.shiftKey) {
              nav_prev_toplink();
            }
            else {
              nav_next_toplink();
            }
          }
          else {
            if (k.shiftKey) {
              nav_up();
            }
            else {
              nav_down();
            }
          }
        }


        // Escape
        function nav_esc() {
          if ($('.level-3.open').length) {
            $('.level-3.open ').removeClass('open')
          }
          else if ($('.level-2.open').length) {
            $('.level-2.open ').removeClass('open')
          }
          else {
            nav_close_megamenu();
          }


        }

        // Left
        function nav_left() {
          if (nav_is_toplink()) {
            nav_prev_toplink();
          }
          else {
            if ($(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a').is(':focus')) {
              $(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').children('.dropdown-toggle.open').focus();
            } 
            else {
              nav_prev_column();
            }
          }
        }

        // Right
        function nav_right() {
          if (nav_is_toplink()) {
            nav_next_toplink();
          }
          else {
            if ($(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav').find('.dropdown-toggle.open').is(':focus')) {
              linkArray[curPos[0]][curPos[1]][curPos[2] + 1].focus();
            } 
            else if (! $(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a').is(':focus')) {
              nav_next_column();
            }
          }
        }

        // Up
        function nav_up() {
          if (nav_is_toplink()) {
            nav_prev_toplink();
          }
          else {
            if (linkArray[curPos[0]][curPos[1]][curPos[2] - 1]) {
              if ($(linkArray[curPos[0]][curPos[1]][curPos[2] - 1]).is(':visible')) {
                linkArray[curPos[0]][curPos[1]][curPos[2] - 1].focus();
              }
              else {
                curPos = [curPos[0], curPos[1], curPos[2] - 1];
                nav_up();
              }
            }
            else {
              nav_prev_column();
            }
          }
        }

        // Down
        function nav_down() {
          if (nav_is_toplink()) {
            nav_next_column();
          }
          else {
            // if there are links/submenus in the column after the current element
            // (and the current element is not the last submenu)
            if ((linkArray[curPos[0]][curPos[1]][curPos[2] + 1]) && ! $(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav').find('li:last .dropdown-toggle.open').is(':focus')) {
              // link/submenu open
              if ($(linkArray[curPos[0]][curPos[1]][curPos[2] + 1]).is(':visible')) {
                // submenu open, going down goes to submenu down (and not submenu links on the right)
                if ($(linkArray[curPos[0]][curPos[1]][curPos[2] + 1]).parents('.mega-nav').find('.dropdown-toggle.open').is(':focus')) {
                  let len = $(linkArray[curPos[0]][curPos[1]][curPos[2]]).siblings('.tb-megamenu-submenu').find('a').length;
                  $(linkArray[curPos[0]][curPos[1]][curPos[2]]).trigger('click');
                  linkArray[curPos[0]][curPos[1]][curPos[2] + len + 1].focus();
                // inside submenu - when arriving to last sublink, go back to first
                } else if ($(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a:last').is(':focus')) {
                  $(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a:first').focus();
                } else {
                  linkArray[curPos[0]][curPos[1]][curPos[2] + 1].focus();
                }
              }
              // submenu closed
              else {
                curPos = [curPos[0], curPos[1], curPos[2] + 1];
                nav_down();
              }
            }
            else {
              // last submenu last sublink
              if ($(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a:last').is(':focus')) {
                $(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav li.open').find('a:first').focus();
              }
              // change column
              else {
                // if last submenu is open
                if ($(linkArray[curPos[0]][curPos[1]][curPos[2]]).parents('.mega-nav').find('li:last .dropdown-toggle.open').is(':focus')) {
                  $(linkArray[curPos[0]][curPos[1]][curPos[2]]).trigger('click');
                }
                nav_next_column();
              }
            }
          }
        }

        // Home Button
        function nav_home() {
          if (nav_is_toplink()) {
            linkArray[0][-1].focus();
          }
          else {
            linkArray[curPos[0]][0][0].focus();
          }
        }

        // End Button
        function nav_end() {
          if (nav_is_toplink()) {
            linkArray.slice(-1)[0][-1].focus();
          }
          else {
            linkArray[curPos[0]].slice(-1)[0].slice(-1)[0].focus();
          }
        }

        /* Helper Functions */
        // Determine Link Level
        function nav_is_toplink() {
          return (curPos[1] < 0);
        }

        // Close Mega Menu
        function nav_close_megamenu() {
          setTimeout(() => {
            $('.tb-megamenu-submenu').css({ top: '79px' })
            $('.tb-megamenu-submenu').css({ opacity: '0' })       
          }, 100);
          setTimeout(() => {
            $('.tb-megamenu .open').removeClass('open');
            $('main .overlay-menu').remove();       
          }, 800);

          $('.tb-megamenu-nav li.level-1 ', context).each(function () {
            $(this).css({ display: 'block' });
            $(this).css({ opacity: '1' });
          });
          ariaCheck();
        }

        // Next Toplink
        function nav_next_toplink() {
          if (linkArray[curPos[0] + 1]) {
            linkArray[curPos[0] + 1][-1].focus();
          }
          else {
            nav_close_megamenu();

            // Focus on the next element.
            Drupal.TBMegaMenu.focusNextPrevElement('next');
          }
        }

        // Previous Toplink
        function nav_prev_toplink() {
          if (linkArray[curPos[0] - 1]) {
            linkArray[curPos[0] - 1][-1].focus();
          }
          else {
            // Focus on the previous element.
            Drupal.TBMegaMenu.focusNextPrevElement('prev');
          }
        }

        // Previous Column
        function nav_prev_column() {
          if (linkArray[curPos[0]][curPos[1] - 1][0]) {
            linkArray[curPos[0]][curPos[1] - 1][0].focus();
          }
          else {
            nav_parent_toplink();
          }
        }

        // Next Column
        function nav_next_column() {
          if (linkArray[curPos[0]][curPos[1] + 1]) {
            linkArray[curPos[0]][curPos[1] + 1][0].focus();
          }
          else {
            nav_parent_toplink();
          }
        }

        // Go to Parent Toplink
        function nav_parent_toplink() {
          linkArray[curPos[0]][-1].focus();
        }

        var ariaCheck = function () {
          $("li.tb-megamenu-item", this).each(function () {
            if ($(this).is('.mega-group')) {
              // Mega menu item has mega class (it's a true mega menu)
              if (!$(this).parents().is('.open')) {
                // Mega menu item has mega class and its ancestor is closed, so apply appropriate ARIA attributes
                $(this).children().attr('aria-expanded', 'false');
              }
              else if ($(this).parents().is('.open')) {
                // Mega menu item has mega class and its ancestor is open, so apply appropriate ARIA attributes
                $(this).children().attr('aria-expanded', 'true');
              }
            }
            else if ($(this).is('.dropdown') || $(this).is('.dropdown-submenu')) {
              // Mega menu item has dropdown (it's a flyout menu)
              if (!$(this).is('.open')) {
                // Mega menu item has dropdown class and is closed, so apply appropriate ARIA attributes
                $(this).children().attr('aria-expanded', 'false');
              }
              else if ($(this).is('.open')) {
                // Mega menu item has dropdown class and is open, so apply appropriate ARIA attributes
                $(this).children().attr('aria-expanded', 'true');
              }
            }
            else {
              // Mega menu item is neither a mega or dropdown class, so remove ARIA attributes (it doesn't have children)
              $(this).children().removeAttr('aria-expanded');
            }
          });
        };

        var showMenu = function ($subMenu, mm_timeout) {

          setTimeout(() => {
            if (!$subMenu.hasClass("level-2")) {
              if ($('.user-logged-in').length) {
                $subMenu.find('.tb-megamenu-submenu').css({ top: '176px' });
              }
              else {
                $subMenu.find('.tb-megamenu-submenu').css({ top: '97px' });
              }
            }
            $subMenu.find('.tb-megamenu-submenu').first().css({ opacity: '1' });
          }, 200);

          $(".close-megamenu").click(function () {
            nav_close_megamenu();
            setTimeout(() => {
              $('.tb-megamenu-submenu').css('height', 'unset');
            }, 300);
          });
          if ($subMenu.hasClass('mega')) {
            $subMenu.addClass('animating');
            clearTimeout($subMenu.data('animatingTimeout'));
            $subMenu.data('animatingTimeout', setTimeout(function () {
              $subMenu.removeClass('animating')
            }, mm_timeout));
            clearTimeout($subMenu.data('hoverTimeout'));
            $subMenu.data('hoverTimeout', setTimeout(function () {
              $subMenu.addClass('open');
              ariaCheck();
            }, 100));
          }
          else {
            clearTimeout($subMenu.data('hoverTimeout'));
            $subMenu.data('hoverTimeout',
              setTimeout(function () {
                $subMenu.addClass('open');
                ariaCheck();
              }, 100));
          }
        };




        var hideMenu = function ($subMenu, mm_timeout) {
          setTimeout(() => {
            $subMenu.find('.tb-megamenu-submenu').first().css({ top: '79px' });
            $subMenu.find('.tb-megamenu-submenu').first().css({ opacity: '0' });
          }, 100);
          setTimeout(() => {
            $('.tb-megamenu-submenu').css('height', 'unset');
          }, 300);

          if (!$subMenu.hasClass('mega')) {
            setTimeout(() => {
              $('main .overlay-menu').remove();
            }, 900);
          }

          setTimeout(() => {

            $subMenu.children('.dropdown-toggle').attr('aria-expanded', 'false');
            if ($subMenu.hasClass('mega')) {
              $subMenu.addClass('animating');
              clearTimeout($subMenu.data('animatingTimeout'));
              $subMenu.data('animatingTimeout', setTimeout(function () {
                $subMenu.removeClass('animating')
              }, mm_timeout));
              clearTimeout($subMenu.data('hoverTimeout'));
              $subMenu.data('hoverTimeout', setTimeout(function () {
                $subMenu.removeClass('open');
                ariaCheck();
              }, 100));
            }
            else {
              clearTimeout($subMenu.data('hoverTimeout'));
              $subMenu.data('hoverTimeout', setTimeout(function () {
                $subMenu.removeClass('open');
                ariaCheck();
              }, 100));
            }
          }, 300);
        };
        var ChangeMenu = function ($subMenu, mm_timeout) {
          $subMenu.children('.dropdown-toggle').attr('aria-expanded', 'false');
          if ($subMenu.hasClass('mega')) {
            $subMenu.addClass('animating');
            clearTimeout($subMenu.data('animatingTimeout'));
            $subMenu.data('animatingTimeout', setTimeout(function () {
              $subMenu.removeClass('animating')
            }, mm_timeout));
            clearTimeout($subMenu.data('hoverTimeout'));
            $subMenu.data('hoverTimeout', setTimeout(function () {

              ariaCheck();
            }, 100));
          }
          else {
            clearTimeout($subMenu.data('hoverTimeout'));
            $subMenu.data('hoverTimeout', setTimeout(function () {
              $subMenu.removeClass('open');
              ariaCheck();
            }, 100));
          }
        };


        $('.tb-megamenu-button', this).click(function () {
          if (parseInt($(this).parent().children('.nav-collapse').height())) {
            $(this).parent().children('.nav-collapse').css({ height: 0, overflow: 'hidden' });
            Drupal.TBMegaMenu.displayedMenuMobile = false;
          }
          else {
            $(this).parent().children('.nav-collapse').css({ height: 'auto', overflow: 'visible' });
            Drupal.TBMegaMenu.displayedMenuMobile = true;
          }
        });

        var isTouch = window.matchMedia('(pointer: coarse)').matches;

        if (!isTouch) {
          var mm_duration = 0;

          $('.tb-megamenu', context).each(function () {
            if ($(this).data('duration')) {
              mm_duration = $(this).data('duration');
            }
          });

          var mm_timeout = mm_duration ? 100 + mm_duration : 500;
          $('.tb-megamenu-subnav > li, li.mega .dropdown-toggle', context).bind('click', function (e) {

            $(this, context).each(function () {
              if ($(this).parent('li').siblings().hasClass('open')); {
                $(this).parent('li').siblings().removeClass('open');
                $(this).parent('li').siblings().children('.dropdown-toggle').removeClass('open');
                $(this).parent('li').siblings().children('.tb-megamenu-submenu').css({ opacity: '0' });
              }
            })

            if ($(this).is('.open')) {
              if (e.which == 1 && $(this).parent().hasClass("dropdown")) {
                setTimeout(() => {
                  $('main .overlay-menu').remove();
                }, 600);

              }
              ChangeMenu($(this), mm_timeout);
              if ($(this).parent().hasClass("dropdown")) {
                setTimeout(() => {
                  $('.tb-megamenu-nav .level-1', context).each(function () {
                    $(this).css({ display: 'block' });
                  });
                }, 200);
              }
            }
            else {
              showMenu($(this), mm_timeout);
              if ($('main .overlay-menu').length == 0) {
                $('main').append('<div class="overlay-menu"></div>');
              }
            }
            var parent = $(this)
            $('main .overlay-menu').bind('click', function (event) {
              hideMenu(parent, mm_timeout);
              $('.nav > li, li.level-1', context).each(function () {
                $(this).css({ display: 'block' });
              });
            });
          });

          $('.tb-megamenu-nav .dropdown span ', context).bind('click', function (event) {
            if ($(this).is('.open')) {
              hideMenu($(this).parent(), mm_timeout);
              if ($(this).parent().hasClass("dropdown")) {
                $('.tb-megamenu-nav  li.level-1', context).each(function () {
                  $(this).css({ display: 'block' });
                  $(this).css({ opacity: '1' });
                });
              }
            }
            else {
              showMenu($(this).parent(), mm_timeout);
              if ($(this).parent().hasClass("dropdown")) {
                setTimeout(() => {
                  $('.tb-megamenu-nav li.level-1', context).each(function () {
                    $(this).css({ display: 'block' });
                    $(this).css({ opacity: '1' });
                  });
                }, 100);
              }
              if ($('main .overlay-menu').length == 0) {
                $('main').append('<div class="overlay-menu"></div>');
              }

              var parent = $(this).parent();

              $('main .overlay-menu').bind('click', function (event) {
                hideMenu(parent, mm_timeout);
                setTimeout(() => {
                  $('.tb-megamenu-nav li.level-1 ', context).each(function () {
                    $(this).css({ display: 'block' });
                    $(this).css({ opacity: '0' });
                    $(this).css({ opacity: '1' });
                  });
                }, 100);
                $('.nav > li, li.level-1', context).each(function () {
                  $(this).css({ display: 'block' });
                });
              });
            }
          });
        

          $('.nav > li > .dropdown-toggle, li.mega > .dropdown-toggle', context).on('keypress', function (e) {
            if (e.which == 13) {
              var $this = $(this);
              if (!$('main .overlay-menu').length) {
                $('main').append('<div class="overlay-menu"></div>');
              }
              var $subMenu = $this.closest('li');
              if ($subMenu.is('.open')) {
                hideMenu($subMenu, mm_timeout);
                if ($subMenu.hasClass("dropdown")) {
                  $('.tb-megamenu-nav  li.level-1', context).each(function () {
                    $(this).css({ display: 'block' });
                    $(this).css({ opacity: '1' });
                  });
                }
              }
              else {
                showMenu($subMenu, mm_timeout);
                if ($subMenu.hasClass("dropdown")) {
                  setTimeout(() => {
                    $('.tb-megamenu-nav li.level-1 ', context).each(function () {
                      if (!$(this).is('.open')) {
                        $(this).css({ opacity: '1' });
                        $(this).css({ display: 'block' });
                      }
                      else {
                        $(this).css({ display: 'block' });
                        $(this).css({ opacity: '1' });
                      }
                    });
                  }, 100);
                }
                if ($('main .overlay-menu').length == 0) {
                  $('main').append('<div class="overlay-menu"></div>');
                }

                var parent = $(this).parent();

                $('main .overlay-menu').bind('click', function (event) {
                  hideMenu(parent, mm_timeout);
                  setTimeout(() => {
                    $('.tb-megamenu-nav li.level-1 ', context).each(function () {
                      $(this).css({ display: 'block' });
                      $(this).css({ opacity: '0' });
                      $(this).css({ opacity: '1' });
                    });
                  }, 100);
                  $('.nav > li, li.level-1', context).each(function () {
                    $(this).css({ display: 'block' });
                  });
                });
              }
              // If the focus moves outside of the subMenu, close it.
              $(document).bind('focusin', function (event) {
                if ($subMenu.has(event.target).length) {
                  return;
                }
                $(document).unbind(event);
                hideMenu($subMenu, mm_timeout);
              });
            }
          });


          /**
           * Allow tabbing by appending the open class.
           * Works in tandem with CSS changes that utilize opacity rather than
           * display none
           */
          // If the selected anchor is not in the TB Megamenu, remove all "open"
          // class occurrences
          $('a, span').focus(function (event) {
            if (!$(this).parent().hasClass('tb-megamenu-item') && !$(this).parents('.tb-megamenu-block').length) {
              nav_close_megamenu();
            }
          });

          $('.nav > li > a, li.mega > a').focus(function (event) {
            // Remove all occurrences of "open" from other menu trees
            var siblings = $(this).parents('.tb-megamenu-item').siblings();
            // var siblings = $(this).closest('.tb-megamenu-item.level-1').siblings();
            $.each(siblings, function (i, v) {
              var cousins = $(v).find('.open');
              $.each(cousins, function (index, value) {
                $(value).removeClass('open');
                ariaCheck($(this));
              });
              $(v).removeClass('open');
              ariaCheck();
            });
            // Open the submenu if the selected item has one
            /*if ($(this).next(".tb-megamenu-submenu").length > 0) {
              if (!$(this).parent().hasClass("open")) {
                $(this).parent().addClass("open");
              }
            }*/
            // If the anchor's top-level parent is not open, open it
            /* if (!$(this).closest('.tb-megamenu-item.dropdown').hasClass('open') && $(this).closest('.tb-megamenu-item.dropdown').find('.tb-megamenu-submenu').length > 0) {
              $(this).closest('.tb-megamenu-item.dropdown').addClass('open');
              ariaCheck();
            }*/
            // If anchor's parent submenus are not open, open them
            var parents = $(this).parents('.tb-megamenu-item.dropdown-submenu');
            $.each(parents, function (i, v) {
              if (!$(v).hasClass('open')) {
                $(v).addClass('open');
                ariaCheck();
              }
            });
          });
        }

        // Define actions for touch devices.
        var createTouchMenu = function (items) {
          items.children("a, span").each(function () {
            var $item = $(this);
            var tbitem = $(this).parent();

            $item.click(function (event) {
              // If the menu link has already been clicked once...
              if ($item.hasClass("tb-megamenu-clicked")) {
                var $uri = $item.attr("href");

                // If the menu link has a URI, go to the link.
                // <nolink> menu items will not have a URI.
                if ($uri) {
                  window.location.href = $uri;
                }
                else {
                  $item.removeClass("tb-megamenu-clicked");
                  hideMenu(tbitem, mm_timeout);
                }
              }
              else {
                event.preventDefault();

                // Hide any already open menus.
                nav_close_megamenu();
                $(".tb-megamenu").find(".tb-megamenu-clicked").removeClass("tb-megamenu-clicked");

                // Open the submenu.
                $item.addClass("tb-megamenu-clicked");
                showMenu(tbitem, mm_timeout);
              }
            });
          });

          // Anytime there's a click outside the menu, close the menu.
          $(document).on('click', function (event) {
            if ($(event.target).closest('.tb-megamenu-nav').length === 0) {
              nav_close_megamenu();
              $(".tb-megamenu").find(".tb-megamenu-clicked").removeClass("tb-megamenu-clicked");
            };
          })
        };

        if (isTouch) {
          // createTouchMenu($(".tb-megamenu ul.nav li.mega", context).has(".dropdown-menu"));
        };

        $(window).on('load resize', function () {
          var windowWidth = window.innerWidth ? window.innerWidth : $(window).width();
          if (windowWidth != Drupal.TBMegaMenu.oldWindowWidth) {
            Drupal.TBMegaMenu.oldWindowWidth = windowWidth;
            Drupal.TBMegaMenu.menuResponsive();

            if (windowWidth >= Drupal.TBMegaMenu.supportedScreens[0]) {
              navParent.addEventListener('keydown', keydownEvent);
            }
            else {
              navParent.removeEventListener('keydown', keydownEvent);
            }
          }
        });

      });

    }
  }
})(jQuery, Drupal, drupalSettings);
;
